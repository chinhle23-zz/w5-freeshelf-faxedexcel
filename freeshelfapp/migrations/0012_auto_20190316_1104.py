# Generated by Django 2.1.7 on 2019-03-16 15:04

# started by running '$ ./manage.py makemigrations --empty freeshelfapp'

# '$ ./manage.py makemigrations --empty freeshelfapp' added this by default
from django.db import migrations

# added by me
import csv
import os.path
from django.conf import settings
from django.core.files import File

def load_book_data(apps, schema_editor):
    """
    Read a CSV file full of books and insert them into the database
    """
    Book = apps.get_model('freeshelfapp', 'Book')
        # https://docs.djangoproject.com/en/2.1/ref/applications/#application-registry
        # 'apps.get_model(app_label, model_name, require_ready=True)' returns the 'Book' model in the 'freeshelf' app
    # Author = apps.get_model('freeshelfapp', 'Author')
    # Category = apps.get_model('freeshelfapp', 'Category')
    # Favorite = apps.get_model('freeshelfapp', 'Favorite')

    datapath = os.path.join(settings.BASE_DIR, 'initial_data')
        # data to be read is stored in the 'initial_data' directory
    datafile = os.path.join(datapath, 'books.csv')
        # data file to be read is named 'books.csv'
    # Book.objects.all().delete()
        # delete all existing 'Book' objects in the database

    with open(datafile) as file: 
        reader = csv.DictReader(file)
            # https://docs.python.org/3.7/library/csv.html?highlight=csv%20dictreader#csv.DictReader
            # 'csv.DictReader' creates an object that operates like a regular reader but maps the information in each row to an 'OrderedDict' whose keys are given by the optional fieldnames parameter
            # if fieldnames is omitted (as we do here), the values in the first row of the file will be used as the fieldnames
        for row in reader:
            book_title = row['title']
            if Book.objects.filter(title=book_title).count():
                continue
                    # if a book with that title already exists, then skip the rest of the statements in the loop and 'continue' on to the next iteration of the loop
                    # prevents duplicate books
            book = Book(
                title=row['title'],
                # author=row['author'], # manytomany field????
                # category=row['category'], # manytomany field????
                summary=row['summary'],
                url=row['url'],
                # date_added=['date_added'],
                # favorited_by=['favorited_by'] # manytomany field????
            )
            # book.picture.save(
            #     row['picture'], 
            #     File(open(os.path.join(datapath, row['picture']), 'rb'))
            # )
                # https://docs.djangoproject.com/en/2.1/ref/files/file/#additional-methods-on-files-attached-to-objects
                # '.save(name, content, save=True)' saves a new file with the file name and contents provided
                # "row['picture']" specifies the file name
                # https://docs.djangoproject.com/en/2.1/topics/files/#the-file-object
                # 'File()' Django built-in function used to create a 'file' object
                # https://docs.python.org/3.7/library/functions.html#open
                # 'open(file, mode)' Python built-in function used to open the "row['picture']" file in 'rb' mode ('rb' stands for open for reading in binary mode)
            book.save()


class Migration(migrations.Migration):

    dependencies = [
        ('freeshelfapp', '0011_auto_20190316_1055'),
    ]

    operations = [
        migrations.RunPython(load_book_data)
    ]
